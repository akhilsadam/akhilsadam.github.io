
// This file is generated by tree.py, do not edit manually
use yew::{html, AttrValue, Html};
use comrak::{markdown_to_html, ComrakOptions};
// use include_dir::{include_dir, Dir};
// use gloo_console::log;
// use wasm_bindgen::JsValue;

pub mod default;
pub use crate::default::*;

pub fn md_gen(data:&str) -> Html
{
    let mut options = ComrakOptions::default();
    
    options.render.unsafe_ = true;
    options.render.github_pre_lang = true;
    options.extension.strikethrough = true;
    options.extension.tagfilter = true;
    options.extension.table = true;
    options.extension.autolink = true;
    options.extension.tasklist = true;
    options.extension.superscript = true;
    options.extension.footnotes = true;
    options.extension.description_lists = true;
    
    let htmlstr : String = markdown_to_html(&data, &options);
    let parsed = Html::from_html_unchecked(AttrValue::from(htmlstr));
    html! {
        <div class="wrapper" markdown="1">
            {parsed}
        </div>
    }
}



pub fn cv() -> Html
{
    let data = include_str!("../content/cv/cv.md");
    // let file_loc = "/static/md/content/cv/cv.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}


pub fn art() -> Html
{
    let data = include_str!("../content/art/art.md");
    md_gen(&data)
}

pub fn world() -> Html
{
    let data = include_str!("../content/world/world.md");
    md_gen(&data)
}

pub fn arch() -> Html
{
    let data = include_str!("../content/arch/arch.md");
    md_gen(&data)
}


pub fn lang_tomography_complete_list() -> Html
{
    let data = include_str!("lang-tomography/complete_list.md");
    // let file_loc = "/static/md/projects/lang-tomography/complete_list.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}


pub fn lang_tomography_index() -> Html
{
    let data = include_str!("lang-tomography/index.md");
    // let file_loc = "/static/md/projects/lang-tomography/index.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}


pub fn lang_tomography_mini_pet_mini_pet() -> Html
{
    let data = include_str!("lang-tomography/mini-pet/mini-pet.md");
    // let file_loc = "/static/md/projects/lang-tomography/mini-pet/mini-pet.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}


pub fn lang_tomography_plastic_pet_plastic_pet() -> Html
{
    let data = include_str!("lang-tomography/plastic-pet/plastic-pet.md");
    // let file_loc = "/static/md/projects/lang-tomography/plastic-pet/plastic-pet.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}


pub fn lang_tomography_reconstruction_reconstruction() -> Html
{
    let data = include_str!("lang-tomography/reconstruction/reconstruction.md");
    // let file_loc = "/static/md/projects/lang-tomography/reconstruction/reconstruction.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}


pub fn pho_ices_weather_forecast() -> Html
{
    let data = include_str!("pho-ices/weather-forecast.md");
    // let file_loc = "/static/md/projects/pho-ices/weather-forecast.md";
    // let data = default::get_string_from_file(&file_loc).unwrap();
    md_gen(&data)
}

pub fn project(name: &str) -> Html {
    match name {
        "lang-tomography/complete_list" => lang_tomography_complete_list(),
	"lang-tomography/index" => lang_tomography_index(),
	"lang-tomography/mini-pet/mini-pet" => lang_tomography_mini_pet_mini_pet(),
	"lang-tomography/plastic-pet/plastic-pet" => lang_tomography_plastic_pet_plastic_pet(),
	"lang-tomography/reconstruction/reconstruction" => lang_tomography_reconstruction_reconstruction(),
	"pho-ices/weather-forecast" => pho_ices_weather_forecast(),
        _ => default::notfound(),
    }
}
